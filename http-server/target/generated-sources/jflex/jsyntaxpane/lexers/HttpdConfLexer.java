/* The following code was generated by JFlex 1.4.1 on 02.03.10 1:14 */

package jsyntaxpane.lexers;

import jsyntaxpane.DefaultLexer;
import jsyntaxpane.Token;
import jsyntaxpane.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 02.03.10 1:14 from the specification file
 * <tt>F:/devel.projects/work/shareware/ApacheTune/sources/ApacheTune/http-server/src/main/jflex/httpdconf.flex</tt>
 */
public final class HttpdConfLexer extends DefaultLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\6\1\3\1\2\1\0\1\3\1\1\16\6\4\0\1\50\1\47"+
    "\1\15\1\4\1\5\2\0\1\16\1\47\1\47\1\0\1\14\1\47"+
    "\1\14\1\12\1\0\1\7\11\10\1\47\1\47\1\47\1\47\1\47"+
    "\1\47\1\47\1\27\1\26\1\25\1\30\1\13\1\11\1\45\1\42"+
    "\1\31\1\46\1\36\1\32\1\34\1\37\1\23\1\33\1\41\1\21"+
    "\1\20\1\24\1\35\1\22\1\43\1\40\1\44\1\5\1\47\1\17"+
    "\1\47\1\0\1\5\1\0\1\27\1\26\1\25\1\30\1\13\1\11"+
    "\1\45\1\42\1\31\1\46\1\36\1\32\1\34\1\37\1\23\1\33"+
    "\1\41\1\21\1\20\1\24\1\35\1\22\1\43\1\40\1\44\1\5"+
    "\1\47\1\0\1\47\1\47\41\6\2\0\4\5\4\0\1\5\2\0"+
    "\1\6\7\0\1\5\4\0\1\5\5\0\27\5\1\0\37\5\1\0"+
    "\u013f\5\31\0\162\5\4\0\14\5\16\0\5\5\11\0\1\5\21\0"+
    "\130\6\5\0\23\6\12\0\1\5\13\0\1\5\1\0\3\5\1\0"+
    "\1\5\1\0\24\5\1\0\54\5\1\0\46\5\1\0\5\5\4\0"+
    "\202\5\1\0\4\6\3\0\105\5\1\0\46\5\2\0\2\5\6\0"+
    "\20\5\41\0\46\5\2\0\1\5\7\0\47\5\11\0\21\6\1\0"+
    "\27\6\1\0\3\6\1\0\1\6\1\0\2\6\1\0\1\6\13\0"+
    "\33\5\5\0\3\5\15\0\4\6\14\0\6\6\13\0\32\5\5\0"+
    "\13\5\16\6\7\0\12\6\4\0\2\5\1\6\143\5\1\0\1\5"+
    "\10\6\1\0\6\6\2\5\2\6\1\0\4\6\2\5\12\6\3\5"+
    "\2\0\1\5\17\0\1\6\1\5\1\6\36\5\33\6\2\0\3\5"+
    "\60\0\46\5\13\6\1\5\u014f\0\3\6\66\5\2\0\1\6\1\5"+
    "\20\6\2\0\1\5\4\6\3\0\12\5\2\6\2\0\12\6\21\0"+
    "\3\6\1\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0"+
    "\1\5\3\0\4\5\2\0\1\6\1\5\7\6\2\0\2\6\2\0"+
    "\3\6\11\0\1\6\4\0\2\5\1\0\3\5\2\6\2\0\12\6"+
    "\4\5\15\0\3\6\1\0\6\5\4\0\2\5\2\0\26\5\1\0"+
    "\7\5\1\0\2\5\1\0\2\5\1\0\2\5\2\0\1\6\1\0"+
    "\5\6\4\0\2\6\2\0\3\6\13\0\4\5\1\0\1\5\7\0"+
    "\14\6\3\5\14\0\3\6\1\0\11\5\1\0\3\5\1\0\26\5"+
    "\1\0\7\5\1\0\2\5\1\0\5\5\2\0\1\6\1\5\10\6"+
    "\1\0\3\6\1\0\3\6\2\0\1\5\17\0\2\5\2\6\2\0"+
    "\12\6\1\0\1\5\17\0\3\6\1\0\10\5\2\0\2\5\2\0"+
    "\26\5\1\0\7\5\1\0\2\5\1\0\5\5\2\0\1\6\1\5"+
    "\6\6\3\0\2\6\2\0\3\6\10\0\2\6\4\0\2\5\1\0"+
    "\3\5\4\0\12\6\1\0\1\5\20\0\1\6\1\5\1\0\6\5"+
    "\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5\1\0\2\5"+
    "\3\0\2\5\3\0\3\5\3\0\10\5\1\0\3\5\4\0\5\6"+
    "\3\0\3\6\1\0\4\6\11\0\1\6\17\0\11\6\11\0\1\5"+
    "\7\0\3\6\1\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5"+
    "\1\0\5\5\4\0\7\6\1\0\3\6\1\0\4\6\7\0\2\6"+
    "\11\0\2\5\4\0\12\6\22\0\2\6\1\0\10\5\1\0\3\5"+
    "\1\0\27\5\1\0\12\5\1\0\5\5\2\0\1\6\1\5\7\6"+
    "\1\0\3\6\1\0\4\6\7\0\2\6\7\0\1\5\1\0\2\5"+
    "\4\0\12\6\22\0\2\6\1\0\10\5\1\0\3\5\1\0\27\5"+
    "\1\0\20\5\4\0\6\6\2\0\3\6\1\0\4\6\11\0\1\6"+
    "\10\0\2\5\4\0\12\6\22\0\2\6\1\0\22\5\3\0\30\5"+
    "\1\0\11\5\1\0\1\5\2\0\7\5\3\0\1\6\4\0\6\6"+
    "\1\0\1\6\1\0\10\6\22\0\2\6\15\0\60\5\1\6\2\5"+
    "\7\6\4\0\10\5\10\6\1\0\12\6\47\0\2\5\1\0\1\5"+
    "\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0\7\5"+
    "\1\0\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0\4\5"+
    "\1\6\2\5\6\6\1\0\2\6\1\5\2\0\5\5\1\0\1\5"+
    "\1\0\6\6\2\0\12\6\2\0\2\5\42\0\1\5\27\0\2\6"+
    "\6\0\12\6\13\0\1\6\1\0\1\6\1\0\1\6\4\0\2\6"+
    "\10\5\1\0\42\5\6\0\24\6\1\0\2\6\4\5\4\0\10\6"+
    "\1\0\44\6\11\0\1\6\71\0\42\5\1\0\5\5\1\0\2\5"+
    "\1\0\7\6\3\0\4\6\6\0\12\6\6\0\6\5\4\6\106\0"+
    "\46\5\12\0\51\5\7\0\132\5\5\0\104\5\5\0\122\5\6\0"+
    "\7\5\1\0\77\5\1\0\1\5\1\0\4\5\2\0\7\5\1\0"+
    "\1\5\1\0\4\5\2\0\47\5\1\0\1\5\1\0\4\5\2\0"+
    "\37\5\1\0\1\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0"+
    "\4\5\2\0\7\5\1\0\7\5\1\0\27\5\1\0\37\5\1\0"+
    "\1\5\1\0\4\5\2\0\7\5\1\0\47\5\1\0\23\5\16\0"+
    "\11\6\56\0\125\5\14\0\u026c\5\2\0\10\5\12\0\32\5\5\0"+
    "\113\5\3\0\3\5\17\0\15\5\1\0\4\5\3\6\13\0\22\5"+
    "\3\6\13\0\22\5\2\6\14\0\15\5\1\0\3\5\1\0\2\6"+
    "\14\0\64\5\40\6\3\0\1\5\3\0\2\5\1\6\2\0\12\6"+
    "\41\0\3\6\2\0\12\6\6\0\130\5\10\0\51\5\1\6\126\0"+
    "\35\5\3\0\14\6\4\0\14\6\12\0\12\6\36\5\2\0\5\5"+
    "\u038b\0\154\5\224\0\234\5\4\0\132\5\6\0\26\5\2\0\6\5"+
    "\2\0\46\5\2\0\6\5\2\0\10\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\37\5\2\0\65\5\1\0\7\5\1\0\1\5"+
    "\3\0\3\5\1\0\7\5\3\0\4\5\2\0\6\5\4\0\15\5"+
    "\5\0\3\5\1\0\7\5\17\0\4\6\32\0\5\6\20\0\2\5"+
    "\23\0\1\5\13\0\4\6\6\0\6\6\1\0\1\5\15\0\1\5"+
    "\40\0\22\5\36\0\15\6\4\0\1\6\3\0\6\6\27\0\1\5"+
    "\4\0\1\5\2\0\12\5\1\0\1\5\3\0\5\5\6\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\4\5\1\0\3\5\1\0\7\5"+
    "\3\0\3\5\5\0\5\5\26\0\44\5\u0e81\0\3\5\31\0\11\5"+
    "\6\6\1\0\5\5\2\0\5\5\4\0\126\5\2\0\2\6\2\0"+
    "\3\5\1\0\137\5\5\0\50\5\4\0\136\5\21\0\30\5\70\0"+
    "\20\5\u0200\0\u19b6\5\112\0\u51a6\5\132\0\u048d\5\u0773\0\u2ba4\5\u215c\0"+
    "\u012e\5\2\0\73\5\225\0\7\5\14\0\5\5\5\0\1\5\1\6"+
    "\12\5\1\0\15\5\1\0\5\5\1\0\1\5\1\0\2\5\1\0"+
    "\2\5\1\0\154\5\41\0\u016b\5\22\0\100\5\2\0\66\5\50\0"+
    "\15\5\3\0\20\6\20\0\4\6\17\0\2\5\30\0\3\5\31\0"+
    "\1\5\6\0\5\5\1\0\207\5\2\0\1\6\4\0\1\5\13\0"+
    "\12\6\7\0\32\5\4\0\1\5\1\0\32\5\12\0\132\5\3\0"+
    "\6\5\2\0\6\5\2\0\6\5\2\0\3\5\3\0\2\5\3\0"+
    "\2\5\22\0\3\6\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\5\1\4\1\6"+
    "\1\4\2\1\22\4\1\6\2\3\1\0\1\5\2\0"+
    "\11\4\2\0\7\4\1\7\43\4\2\0\14\4\2\10"+
    "\27\4\1\7\152\4\1\7\1\4\1\7\32\4\1\7"+
    "\13\4\1\7\135\4\1\7\6\4\1\7\52\4\1\7"+
    "\36\4\1\7\7\4\1\7\64\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[514];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e\0\u0267"+
    "\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d\0\u0386\0\u03af"+
    "\0\u03d8\0\u0401\0\u042a\0\u0453\0\u047c\0\u04a5\0\51\0\u04ce"+
    "\0\51\0\315\0\51\0\u04f7\0\u0520\0\u0549\0\u0572\0\u059b"+
    "\0\u05c4\0\u05ed\0\u0616\0\u063f\0\u0668\0\u0691\0\u06ba\0\u06e3"+
    "\0\u070c\0\u0735\0\u075e\0\u0787\0\u07b0\0\u07d9\0\u0802\0\244"+
    "\0\u082b\0\u0854\0\u087d\0\u08a6\0\u08cf\0\u08f8\0\u0921\0\u094a"+
    "\0\u0973\0\u099c\0\u09c5\0\u09ee\0\u0a17\0\u0a40\0\u0a69\0\u0a92"+
    "\0\u0abb\0\u0ae4\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1\0\u0bda"+
    "\0\u0c03\0\u0c2c\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0\0\u0cf9\0\u0d22"+
    "\0\u0d4b\0\u0d74\0\u0d9d\0\u0dc6\0\u0def\0\u0e18\0\u0e41\0\u0e6a"+
    "\0\u0e93\0\u0ebc\0\u0ee5\0\u0f0e\0\u0f37\0\u0f60\0\u0f89\0\u0fb2"+
    "\0\u0fdb\0\51\0\u06e3\0\u1004\0\u102d\0\u1056\0\u107f\0\u10a8"+
    "\0\u10d1\0\u10fa\0\u1123\0\u114c\0\u1175\0\u119e\0\u11c7\0\u11f0"+
    "\0\u1219\0\u1242\0\u126b\0\u1294\0\u12bd\0\u12e6\0\u130f\0\u1338"+
    "\0\u1361\0\u138a\0\u13b3\0\u13dc\0\u1405\0\u142e\0\u1457\0\u1480"+
    "\0\u14a9\0\u14d2\0\u14fb\0\u1524\0\u154d\0\u1576\0\u159f\0\u15c8"+
    "\0\u15f1\0\u161a\0\u1643\0\u166c\0\u1695\0\u16be\0\u16e7\0\u1710"+
    "\0\u1739\0\u1762\0\u178b\0\u17b4\0\u17dd\0\u1806\0\u182f\0\u1858"+
    "\0\u1881\0\u18aa\0\u18d3\0\u18fc\0\u1925\0\u194e\0\u1977\0\u19a0"+
    "\0\u19c9\0\u19f2\0\u1a1b\0\u1a44\0\u1a6d\0\u1a96\0\u1abf\0\u1ae8"+
    "\0\u1b11\0\u1b3a\0\u1b63\0\u1b8c\0\u1bb5\0\u1bde\0\u1c07\0\u1c30"+
    "\0\u1c59\0\u1c82\0\u1cab\0\u1cd4\0\u1cfd\0\u1d26\0\u1d4f\0\u1d78"+
    "\0\u1da1\0\u1dca\0\u1df3\0\u1e1c\0\u1e45\0\u1e6e\0\u1e97\0\u1ec0"+
    "\0\u1ee9\0\u1f12\0\u1f3b\0\u1f64\0\u1f8d\0\u1fb6\0\u1fdf\0\u2008"+
    "\0\u2031\0\u205a\0\u2083\0\u20ac\0\u20d5\0\u20fe\0\u2127\0\u2150"+
    "\0\u2179\0\u21a2\0\u21cb\0\u21f4\0\u221d\0\u2246\0\u226f\0\u2298"+
    "\0\u22c1\0\u22ea\0\u2313\0\u233c\0\u2365\0\u238e\0\u23b7\0\u23e0"+
    "\0\u2409\0\u2432\0\u245b\0\u2484\0\u24ad\0\u24d6\0\u24ff\0\u2528"+
    "\0\u2551\0\u257a\0\u25a3\0\u25cc\0\u25f5\0\u261e\0\u2647\0\u2670"+
    "\0\u2699\0\u26c2\0\u26eb\0\u2714\0\u273d\0\u2766\0\u278f\0\u27b8"+
    "\0\u27e1\0\u280a\0\u2833\0\u285c\0\u2885\0\u28ae\0\u28d7\0\u2900"+
    "\0\u2929\0\u2952\0\u297b\0\u29a4\0\u29cd\0\u29f6\0\u2a1f\0\u2a48"+
    "\0\u2a71\0\u2a9a\0\u2ac3\0\u2aec\0\u2b15\0\u2b3e\0\u2b67\0\u2b90"+
    "\0\u2bb9\0\u2be2\0\u2c0b\0\u2c34\0\u2c5d\0\u2c86\0\u2caf\0\u2cd8"+
    "\0\u2d01\0\u2d2a\0\u2d53\0\u2d7c\0\u2da5\0\u2dce\0\u2df7\0\u2e20"+
    "\0\u2e49\0\u2e72\0\u2e9b\0\u2ec4\0\u2eed\0\u2f16\0\u2f3f\0\u2f68"+
    "\0\u2f91\0\u2fba\0\u2fe3\0\u300c\0\u3035\0\u305e\0\u3087\0\u30b0"+
    "\0\u30d9\0\u3102\0\u312b\0\u3154\0\u317d\0\u31a6\0\u31cf\0\u31f8"+
    "\0\u3221\0\u324a\0\u3273\0\u329c\0\u32c5\0\u32ee\0\u3317\0\u3340"+
    "\0\u3369\0\u3392\0\u33bb\0\u33e4\0\u340d\0\u3436\0\u345f\0\u3488"+
    "\0\u34b1\0\u34da\0\u3503\0\u352c\0\u3555\0\u357e\0\u35a7\0\u35d0"+
    "\0\u35f9\0\u3622\0\u364b\0\u3674\0\u369d\0\u36c6\0\u36ef\0\u3718"+
    "\0\u3741\0\u376a\0\u3793\0\u37bc\0\u37e5\0\u380e\0\u3837\0\u3860"+
    "\0\u3889\0\u38b2\0\u38db\0\u3904\0\u392d\0\u3956\0\u24d6\0\u397f"+
    "\0\u39a8\0\u39d1\0\u39fa\0\u3a23\0\u3a4c\0\u3a75\0\u3a9e\0\u3ac7"+
    "\0\u3af0\0\u3b19\0\u3b42\0\u3b6b\0\u3b94\0\u3bbd\0\u3be6\0\u3c0f"+
    "\0\u3c38\0\u3c61\0\u3c8a\0\u3cb3\0\u3cdc\0\u3d05\0\u3d2e\0\u3d57"+
    "\0\u3d80\0\u3da9\0\u3dd2\0\u3dfb\0\u3e24\0\u3e4d\0\u3e76\0\u3e9f"+
    "\0\u3ec8\0\u3ef1\0\u3f1a\0\u3f43\0\u3f6c\0\u3f95\0\u3fbe\0\u3fe7"+
    "\0\u4010\0\u4039\0\u4062\0\u408b\0\u40b4\0\u40dd\0\u4106\0\u412f"+
    "\0\u4158\0\u4181\0\u41aa\0\u41d3\0\u41fc\0\u4225\0\u424e\0\u4277"+
    "\0\u42a0\0\u42c9\0\u42f2\0\u431b\0\u4344\0\u436d\0\u4396\0\u43bf"+
    "\0\u43e8\0\u4411\0\u443a\0\u4463\0\u448c\0\u44b5\0\u44de\0\u4507"+
    "\0\u4530\0\u4559\0\u4582\0\u45ab\0\u45d4\0\u45fd\0\u4626\0\u464f"+
    "\0\u4678\0\u46a1\0\u46ca\0\u46f3\0\u471c\0\u4745\0\u476e\0\u4797"+
    "\0\u47c0\0\u47e9\0\u4812\0\u483b\0\u4864\0\u488d\0\u48b6\0\u48df"+
    "\0\u4908\0\u4931\0\u495a\0\u4983\0\u49ac\0\u49d5\0\u49fe\0\u4a27"+
    "\0\u4a50\0\u4a79\0\u4aa2\0\u4acb\0\u4af4\0\u4b1d\0\u4b46\0\u4b6f"+
    "\0\u4b98\0\u4bc1\0\u4bea\0\u4c13\0\u4c3c\0\u4c65\0\u4c8e\0\u4cb7"+
    "\0\u4ce0\0\u4d09\0\u4d32\0\u4d5b\0\u4d84\0\u4dad\0\u4dd6\0\u4dff"+
    "\0\u4e28\0\u4e51\0\u4e7a\0\u4ea3\0\u4ecc\0\u4ef5\0\u4f1e\0\u4f47"+
    "\0\u4f70\0\u4f99\0\u4fc2\0\u4feb\0\u5014\0\u503d\0\u5066\0\u508f"+
    "\0\u50b8\0\u50e1";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[514];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\11\1\12\1\2\1\13\1\14\1\2\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\2\5\1\35"+
    "\1\36\3\5\1\37\1\3\52\0\3\3\44\0\1\3"+
    "\1\4\1\40\1\41\46\4\5\0\5\5\1\0\1\5"+
    "\4\0\27\5\11\0\2\42\1\43\1\44\1\45\44\0"+
    "\2\7\1\43\1\44\1\45\42\0\5\5\1\0\1\5"+
    "\4\0\1\5\1\46\1\5\1\47\3\5\1\50\1\5"+
    "\1\51\3\5\1\52\11\5\11\0\2\44\45\0\5\5"+
    "\1\0\1\5\4\0\1\5\1\53\12\5\1\54\2\5"+
    "\1\55\1\56\6\5\2\0\1\57\2\0\12\57\1\0"+
    "\1\57\1\0\31\57\1\60\2\0\13\60\2\0\31\60"+
    "\5\0\5\5\1\0\1\61\4\0\5\5\1\62\16\5"+
    "\1\63\2\5\7\0\5\5\1\0\1\64\4\0\27\5"+
    "\7\0\5\5\1\0\1\65\4\0\11\5\1\66\15\5"+
    "\7\0\4\5\1\67\1\0\1\5\4\0\1\70\1\71"+
    "\11\5\1\72\3\5\1\70\7\5\7\0\5\5\1\0"+
    "\1\5\4\0\11\5\1\73\10\5\1\74\1\5\1\75"+
    "\2\5\7\0\5\5\1\0\1\5\4\0\1\5\1\76"+
    "\1\5\1\77\11\5\1\100\11\5\7\0\5\5\1\0"+
    "\1\5\4\0\1\5\1\101\25\5\7\0\5\5\1\0"+
    "\1\5\4\0\5\5\1\102\2\5\1\103\1\5\1\104"+
    "\2\5\1\105\7\5\1\106\1\5\7\0\5\5\1\0"+
    "\1\107\4\0\3\5\1\110\5\5\1\111\15\5\7\0"+
    "\4\5\1\112\1\0\1\5\4\0\17\5\1\113\7\5"+
    "\7\0\5\5\1\0\1\5\4\0\3\5\1\114\3\5"+
    "\1\115\1\5\1\116\15\5\7\0\5\5\1\0\1\117"+
    "\4\0\1\5\1\120\7\5\1\121\15\5\7\0\5\5"+
    "\1\0\1\5\4\0\7\5\1\122\1\5\1\123\3\5"+
    "\1\124\11\5\7\0\5\5\1\0\1\5\4\0\1\125"+
    "\26\5\7\0\5\5\1\0\1\126\4\0\27\5\7\0"+
    "\5\5\1\0\1\5\4\0\3\5\1\127\3\5\1\130"+
    "\17\5\7\0\5\5\1\0\1\131\4\0\3\5\1\132"+
    "\23\5\7\0\5\5\1\0\1\5\4\0\7\5\1\133"+
    "\17\5\4\0\1\41\55\0\2\44\1\43\1\0\1\45"+
    "\44\0\2\134\3\0\1\135\41\0\5\5\1\0\1\5"+
    "\4\0\3\5\1\136\23\5\7\0\5\5\1\0\1\5"+
    "\4\0\1\5\1\137\10\5\1\140\14\5\7\0\5\5"+
    "\1\0\1\5\4\0\12\5\1\141\4\5\1\142\7\5"+
    "\7\0\5\5\1\0\1\5\4\0\12\5\1\143\14\5"+
    "\7\0\5\5\1\0\1\5\4\0\12\5\1\144\14\5"+
    "\7\0\5\5\1\0\1\5\4\0\1\5\1\145\25\5"+
    "\7\0\5\5\1\0\1\146\4\0\7\5\1\147\17\5"+
    "\7\0\5\5\1\0\1\5\4\0\7\5\1\150\17\5"+
    "\7\0\5\5\1\0\1\5\4\0\4\5\1\151\22\5"+
    "\2\0\1\57\2\0\12\57\1\152\1\57\1\0\31\57"+
    "\1\60\2\0\13\60\2\0\30\60\1\153\5\0\5\5"+
    "\1\0\1\5\4\0\1\5\1\154\2\5\1\155\22\5"+
    "\7\0\5\5\1\0\1\5\4\0\1\5\1\156\1\5"+
    "\1\157\23\5\7\0\5\5\1\0\1\5\4\0\14\5"+
    "\1\160\12\5\7\0\4\5\1\161\1\0\1\5\4\0"+
    "\7\5\1\162\1\163\16\5\7\0\5\5\1\0\1\5"+
    "\4\0\1\5\1\164\25\5\7\0\5\5\1\0\1\5"+
    "\4\0\1\5\1\165\25\5\7\0\4\5\1\70\1\0"+
    "\1\5\4\0\27\5\7\0\5\5\1\0\1\5\4\0"+
    "\10\5\1\166\16\5\7\0\5\5\1\0\1\5\4\0"+
    "\4\5\1\167\22\5\7\0\5\5\1\0\1\5\4\0"+
    "\14\5\1\170\12\5\7\0\5\5\1\0\1\5\4\0"+
    "\1\5\1\171\25\5\7\0\5\5\1\0\1\5\4\0"+
    "\13\5\1\172\13\5\7\0\5\5\1\0\1\5\4\0"+
    "\11\5\1\173\15\5\7\0\5\5\1\0\1\5\4\0"+
    "\14\5\1\174\12\5\7\0\5\5\1\0\1\5\4\0"+
    "\1\175\26\5\7\0\5\5\1\0\1\5\4\0\3\5"+
    "\1\176\23\5\7\0\5\5\1\0\1\5\4\0\5\5"+
    "\1\177\21\5\7\0\5\5\1\0\1\5\4\0\10\5"+
    "\1\200\16\5\7\0\5\5\1\0\1\201\4\0\11\5"+
    "\1\202\1\203\14\5\7\0\5\5\1\0\1\5\4\0"+
    "\4\5\1\204\22\5\7\0\5\5\1\0\1\205\4\0"+
    "\27\5\7\0\4\5\1\206\1\0\1\5\4\0\6\5"+
    "\1\207\10\5\1\210\7\5\7\0\5\5\1\0\1\5"+
    "\4\0\5\5\1\211\21\5\7\0\5\5\1\0\1\5"+
    "\4\0\1\5\1\212\25\5\7\0\5\5\1\0\1\5"+
    "\4\0\14\5\1\213\12\5\7\0\4\5\1\214\1\0"+
    "\1\5\4\0\5\5\1\215\2\5\1\216\16\5\7\0"+
    "\5\5\1\0\1\5\4\0\5\5\1\217\1\5\1\220"+
    "\15\5\1\221\1\5\7\0\5\5\1\0\1\5\4\0"+
    "\17\5\1\222\7\5\7\0\5\5\1\0\1\5\4\0"+
    "\1\223\13\5\1\224\12\5\7\0\5\5\1\0\1\5"+
    "\4\0\1\5\1\225\25\5\7\0\5\5\1\0\1\226"+
    "\4\0\3\5\1\227\23\5\7\0\5\5\1\0\1\5"+
    "\4\0\10\5\1\230\16\5\7\0\5\5\1\0\1\5"+
    "\4\0\20\5\1\231\5\5\1\232\7\0\5\5\1\0"+
    "\1\5\4\0\14\5\1\233\2\5\1\234\7\5\7\0"+
    "\5\5\1\0\1\5\4\0\12\5\1\235\14\5\7\0"+
    "\5\5\1\0\1\236\4\0\27\5\7\0\5\5\1\0"+
    "\1\237\4\0\27\5\7\0\5\5\1\0\1\5\4\0"+
    "\4\5\1\240\11\5\1\241\1\242\7\5\7\0\5\5"+
    "\1\0\1\5\4\0\14\5\1\243\12\5\7\0\5\5"+
    "\1\0\1\5\4\0\7\5\1\244\17\5\7\0\5\5"+
    "\1\0\1\5\4\0\1\245\26\5\7\0\5\5\1\0"+
    "\1\5\4\0\1\5\1\246\25\5\11\0\2\134\1\43"+
    "\46\0\2\134\45\0\5\5\1\0\1\5\4\0\14\5"+
    "\1\70\12\5\7\0\5\5\1\0\1\5\4\0\5\5"+
    "\1\247\21\5\7\0\5\5\1\0\1\5\4\0\12\5"+
    "\1\250\14\5\7\0\5\5\1\0\1\5\4\0\12\5"+
    "\1\251\14\5\7\0\5\5\1\0\1\5\4\0\5\5"+
    "\1\252\21\5\7\0\5\5\1\0\1\253\4\0\27\5"+
    "\7\0\5\5\1\0\1\5\4\0\12\5\1\70\14\5"+
    "\7\0\5\5\1\0\1\5\4\0\3\5\1\254\23\5"+
    "\7\0\5\5\1\0\1\5\4\0\1\5\1\255\25\5"+
    "\7\0\5\5\1\0\1\5\4\0\11\5\1\144\15\5"+
    "\7\0\5\5\1\0\1\5\4\0\6\5\1\256\20\5"+
    "\7\0\5\5\1\0\1\257\4\0\27\5\7\0\5\5"+
    "\1\0\1\5\4\0\2\5\1\260\24\5\7\0\5\5"+
    "\1\0\1\261\4\0\22\5\1\262\4\5\7\0\5\5"+
    "\1\0\1\5\4\0\11\5\1\263\15\5\7\0\5\5"+
    "\1\0\1\5\4\0\1\5\1\264\25\5\7\0\5\5"+
    "\1\0\1\5\4\0\12\5\1\265\14\5\7\0\5\5"+
    "\1\0\1\266\4\0\27\5\7\0\5\5\1\0\1\5"+
    "\4\0\10\5\1\267\16\5\7\0\5\5\1\0\1\5"+
    "\4\0\11\5\1\270\15\5\7\0\5\5\1\0\1\5"+
    "\4\0\1\271\26\5\7\0\5\5\1\0\1\5\4\0"+
    "\4\5\1\272\22\5\7\0\5\5\1\0\1\273\4\0"+
    "\27\5\7\0\5\5\1\0\1\5\4\0\11\5\1\274"+
    "\15\5\7\0\5\5\1\0\1\275\4\0\27\5\7\0"+
    "\5\5\1\0\1\276\4\0\27\5\7\0\5\5\1\0"+
    "\1\277\4\0\27\5\7\0\5\5\1\0\1\5\4\0"+
    "\4\5\1\70\22\5\7\0\5\5\1\0\1\5\4\0"+
    "\6\5\1\300\5\5\1\301\12\5\7\0\5\5\1\0"+
    "\1\5\4\0\4\5\1\302\22\5\7\0\5\5\1\0"+
    "\1\5\4\0\23\5\1\303\3\5\7\0\5\5\1\0"+
    "\1\304\4\0\27\5\7\0\5\5\1\0\1\305\4\0"+
    "\3\5\1\306\1\307\1\310\2\5\1\311\1\312\1\313"+
    "\7\5\1\262\4\5\7\0\5\5\1\0\1\5\4\0"+
    "\1\5\1\173\25\5\7\0\5\5\1\0\1\5\4\0"+
    "\7\5\1\314\17\5\7\0\5\5\1\0\1\5\4\0"+
    "\3\5\1\315\23\5\7\0\5\5\1\0\1\5\4\0"+
    "\22\5\1\316\4\5\7\0\5\5\1\0\1\5\4\0"+
    "\17\5\1\173\7\5\7\0\5\5\1\0\1\5\4\0"+
    "\7\5\1\317\17\5\7\0\5\5\1\0\1\5\4\0"+
    "\15\5\1\255\11\5\7\0\5\5\1\0\1\5\4\0"+
    "\24\5\1\70\2\5\7\0\5\5\1\0\1\5\4\0"+
    "\15\5\1\320\11\5\7\0\5\5\1\0\1\321\4\0"+
    "\27\5\7\0\5\5\1\0\1\5\4\0\3\5\1\322"+
    "\23\5\7\0\5\5\1\0\1\5\4\0\3\5\1\70"+
    "\23\5\7\0\5\5\1\0\1\5\4\0\12\5\1\323"+
    "\14\5\7\0\5\5\1\0\1\324\4\0\27\5\7\0"+
    "\5\5\1\0\1\5\4\0\7\5\1\325\17\5\7\0"+
    "\5\5\1\0\1\5\4\0\10\5\1\112\16\5\7\0"+
    "\4\5\1\326\1\0\1\5\4\0\12\5\1\327\14\5"+
    "\7\0\5\5\1\0\1\5\4\0\25\5\1\330\1\5"+
    "\7\0\5\5\1\0\1\5\4\0\4\5\1\331\22\5"+
    "\7\0\5\5\1\0\1\5\4\0\11\5\1\332\15\5"+
    "\7\0\5\5\1\0\1\5\4\0\14\5\1\333\12\5"+
    "\7\0\4\5\1\166\1\0\1\5\4\0\27\5\7\0"+
    "\5\5\1\0\1\5\4\0\10\5\1\70\16\5\7\0"+
    "\4\5\1\334\1\0\1\5\4\0\27\5\7\0\5\5"+
    "\1\0\1\5\4\0\1\5\1\335\14\5\1\336\10\5"+
    "\7\0\5\5\1\0\1\5\4\0\3\5\1\273\23\5"+
    "\7\0\5\5\1\0\1\337\4\0\27\5\7\0\5\5"+
    "\1\0\1\5\4\0\3\5\1\273\5\5\1\340\15\5"+
    "\7\0\5\5\1\0\1\5\4\0\4\5\1\341\22\5"+
    "\7\0\5\5\1\0\1\5\4\0\1\5\1\342\3\5"+
    "\1\343\21\5\7\0\5\5\1\0\1\5\4\0\13\5"+
    "\1\344\13\5\7\0\5\5\1\0\1\5\4\0\11\5"+
    "\1\345\15\5\7\0\5\5\1\0\1\346\4\0\27\5"+
    "\7\0\5\5\1\0\1\70\4\0\27\5\7\0\5\5"+
    "\1\0\1\347\4\0\27\5\7\0\5\5\1\0\1\5"+
    "\4\0\10\5\1\350\16\5\7\0\5\5\1\0\1\5"+
    "\4\0\4\5\1\351\22\5\7\0\5\5\1\0\1\5"+
    "\4\0\17\5\1\70\7\5\7\0\5\5\1\0\1\352"+
    "\4\0\27\5\7\0\5\5\1\0\1\5\4\0\3\5"+
    "\1\353\23\5\7\0\5\5\1\0\1\5\4\0\6\5"+
    "\1\354\20\5\7\0\5\5\1\0\1\5\4\0\24\5"+
    "\1\355\2\5\7\0\5\5\1\0\1\5\4\0\1\356"+
    "\10\5\1\357\15\5\7\0\5\5\1\0\1\5\4\0"+
    "\1\5\1\360\25\5\7\0\5\5\1\0\1\5\4\0"+
    "\25\5\1\70\1\5\7\0\5\5\1\0\1\5\4\0"+
    "\12\5\1\361\14\5\7\0\5\5\1\0\1\5\4\0"+
    "\17\5\1\362\7\5\7\0\5\5\1\0\1\363\4\0"+
    "\27\5\7\0\5\5\1\0\1\5\4\0\17\5\1\364"+
    "\7\5\7\0\5\5\1\0\1\5\4\0\7\5\1\365"+
    "\17\5\7\0\5\5\1\0\1\5\4\0\13\5\1\366"+
    "\13\5\7\0\5\5\1\0\1\367\4\0\27\5\7\0"+
    "\5\5\1\0\1\5\4\0\11\5\1\370\15\5\7\0"+
    "\5\5\1\0\1\5\4\0\1\5\1\166\25\5\7\0"+
    "\5\5\1\0\1\5\4\0\14\5\1\371\12\5\7\0"+
    "\5\5\1\0\1\5\4\0\1\5\1\372\25\5\7\0"+
    "\5\5\1\0\1\5\4\0\11\5\1\373\15\5\7\0"+
    "\5\5\1\0\1\5\4\0\15\5\1\374\11\5\7\0"+
    "\5\5\1\0\1\5\4\0\1\5\1\70\25\5\7\0"+
    "\5\5\1\0\1\5\4\0\3\5\1\375\23\5\7\0"+
    "\5\5\1\0\1\5\4\0\3\5\1\376\23\5\7\0"+
    "\5\5\1\0\1\5\4\0\7\5\1\377\17\5\7\0"+
    "\5\5\1\0\1\5\4\0\1\316\26\5\7\0\5\5"+
    "\1\0\1\5\4\0\11\5\1\u0100\15\5\7\0\5\5"+
    "\1\0\1\5\4\0\3\5\1\246\23\5\7\0\5\5"+
    "\1\0\1\5\4\0\3\5\1\u0101\23\5\7\0\5\5"+
    "\1\0\1\5\4\0\1\u0102\26\5\7\0\5\5\1\0"+
    "\1\5\4\0\1\u0103\26\5\7\0\5\5\1\0\1\5"+
    "\4\0\17\5\1\u0104\7\5\7\0\5\5\1\0\1\5"+
    "\4\0\15\5\1\u0105\11\5\7\0\5\5\1\0\1\5"+
    "\4\0\24\5\1\u0106\2\5\7\0\5\5\1\0\1\5"+
    "\4\0\22\5\1\u0107\4\5\7\0\5\5\1\0\1\u0108"+
    "\4\0\27\5\7\0\5\5\1\0\1\5\4\0\5\5"+
    "\1\u0109\21\5\7\0\5\5\1\0\1\5\4\0\7\5"+
    "\1\u010a\17\5\7\0\5\5\1\0\1\5\4\0\1\356"+
    "\26\5\7\0\5\5\1\0\1\5\4\0\23\5\1\u010b"+
    "\3\5\7\0\5\5\1\0\1\5\4\0\5\5\1\u010c"+
    "\21\5\7\0\5\5\1\0\1\5\4\0\15\5\1\u010d"+
    "\11\5\7\0\5\5\1\0\1\5\4\0\14\5\1\u010e"+
    "\12\5\7\0\5\5\1\0\1\5\4\0\5\5\1\u010f"+
    "\21\5\7\0\5\5\1\0\1\5\4\0\10\5\1\u0110"+
    "\16\5\7\0\5\5\1\0\1\5\4\0\15\5\1\u0111"+
    "\11\5\7\0\5\5\1\0\1\5\4\0\20\5\1\u0112"+
    "\6\5\7\0\5\5\1\0\1\5\4\0\4\5\1\u0113"+
    "\22\5\7\0\5\5\1\0\1\5\4\0\3\5\1\u0114"+
    "\23\5\7\0\5\5\1\0\1\u0115\4\0\27\5\7\0"+
    "\5\5\1\0\1\5\4\0\15\5\1\u0116\11\5\7\0"+
    "\5\5\1\0\1\246\4\0\27\5\7\0\5\5\1\0"+
    "\1\5\4\0\4\5\1\u0117\22\5\7\0\5\5\1\0"+
    "\1\5\4\0\7\5\1\u0118\17\5\7\0\5\5\1\0"+
    "\1\5\4\0\11\5\1\u0119\15\5\7\0\5\5\1\0"+
    "\1\u011a\4\0\27\5\7\0\5\5\1\0\1\u011b\4\0"+
    "\27\5\7\0\5\5\1\0\1\5\4\0\14\5\1\u011c"+
    "\12\5\7\0\5\5\1\0\1\5\4\0\14\5\1\u011d"+
    "\12\5\7\0\5\5\1\0\1\5\4\0\11\5\1\u011e"+
    "\15\5\7\0\5\5\1\0\1\5\4\0\10\5\1\u011f"+
    "\16\5\7\0\5\5\1\0\1\5\4\0\7\5\1\u0120"+
    "\17\5\7\0\5\5\1\0\1\5\4\0\7\5\1\u0121"+
    "\17\5\7\0\5\5\1\0\1\5\4\0\5\5\1\242"+
    "\21\5\7\0\5\5\1\0\1\u0122\4\0\27\5\7\0"+
    "\5\5\1\0\1\5\4\0\2\5\1\u0123\24\5\7\0"+
    "\5\5\1\0\1\u0124\4\0\27\5\7\0\5\5\1\0"+
    "\1\5\4\0\17\5\1\u0125\7\5\7\0\5\5\1\0"+
    "\1\5\4\0\12\5\1\u0126\14\5\7\0\5\5\1\0"+
    "\1\5\4\0\23\5\1\u0127\3\5\7\0\5\5\1\0"+
    "\1\5\4\0\7\5\1\u0128\17\5\7\0\5\5\1\0"+
    "\1\5\4\0\11\5\1\u0129\15\5\7\0\5\5\1\0"+
    "\1\5\4\0\14\5\1\u012a\12\5\7\0\5\5\1\0"+
    "\1\5\4\0\17\5\1\u012b\7\5\7\0\5\5\1\0"+
    "\1\5\4\0\10\5\1\u012c\1\5\1\u012d\14\5\7\0"+
    "\5\5\1\0\1\u012e\4\0\27\5\7\0\5\5\1\0"+
    "\1\5\4\0\10\5\1\u012f\16\5\7\0\5\5\1\0"+
    "\1\5\4\0\1\5\1\u0130\25\5\7\0\5\5\1\0"+
    "\1\5\4\0\2\5\1\u0131\24\5\7\0\5\5\1\0"+
    "\1\5\4\0\17\5\1\u0132\7\5\7\0\5\5\1\0"+
    "\1\5\4\0\4\5\1\u0133\22\5\7\0\5\5\1\0"+
    "\1\5\4\0\6\5\1\u0134\20\5\7\0\5\5\1\0"+
    "\1\5\4\0\17\5\1\u0135\7\5\7\0\5\5\1\0"+
    "\1\u0136\4\0\27\5\7\0\5\5\1\0\1\u0137\4\0"+
    "\27\5\7\0\5\5\1\0\1\5\4\0\3\5\1\u0138"+
    "\23\5\7\0\5\5\1\0\1\5\4\0\7\5\1\u0139"+
    "\17\5\7\0\5\5\1\0\1\5\4\0\17\5\1\u013a"+
    "\7\5\7\0\5\5\1\0\1\5\4\0\15\5\1\173"+
    "\11\5\7\0\5\5\1\0\1\5\4\0\10\5\1\u013b"+
    "\16\5\7\0\5\5\1\0\1\5\4\0\17\5\1\u013c"+
    "\7\5\7\0\5\5\1\0\1\5\4\0\14\5\1\u013d"+
    "\12\5\7\0\5\5\1\0\1\u013e\4\0\27\5\7\0"+
    "\5\5\1\0\1\5\4\0\1\u013f\26\5\7\0\5\5"+
    "\1\0\1\5\4\0\5\5\1\u0140\21\5\7\0\5\5"+
    "\1\0\1\5\4\0\4\5\1\u0141\22\5\7\0\5\5"+
    "\1\0\1\5\4\0\13\5\1\242\13\5\7\0\5\5"+
    "\1\0\1\5\4\0\7\5\1\u0142\17\5\7\0\5\5"+
    "\1\0\1\5\4\0\1\u0143\26\5\7\0\5\5\1\0"+
    "\1\5\4\0\3\5\1\u0144\23\5\7\0\5\5\1\0"+
    "\1\5\4\0\17\5\1\u0145\7\5\7\0\5\5\1\0"+
    "\1\5\4\0\3\5\1\u0146\23\5\7\0\5\5\1\0"+
    "\1\5\4\0\3\5\1\u0147\23\5\7\0\5\5\1\0"+
    "\1\5\4\0\12\5\1\u0148\14\5\7\0\5\5\1\0"+
    "\1\u0149\4\0\27\5\7\0\5\5\1\0\1\5\4\0"+
    "\4\5\1\u014a\22\5\7\0\5\5\1\0\1\5\4\0"+
    "\15\5\1\u0119\11\5\7\0\5\5\1\0\1\5\4\0"+
    "\10\5\1\u014b\16\5\7\0\5\5\1\0\1\u013a\4\0"+
    "\3\5\1\u014c\5\5\1\u014d\15\5\7\0\5\5\1\0"+
    "\1\5\4\0\11\5\1\301\15\5\7\0\5\5\1\0"+
    "\1\5\4\0\1\5\1\u014e\25\5\7\0\5\5\1\0"+
    "\1\5\4\0\2\5\1\u014f\24\5\7\0\5\5\1\0"+
    "\1\5\4\0\7\5\1\u0150\17\5\7\0\5\5\1\0"+
    "\1\u0151\4\0\27\5\7\0\5\5\1\0\1\5\4\0"+
    "\17\5\1\106\7\5\7\0\5\5\1\0\1\5\4\0"+
    "\12\5\1\242\14\5\7\0\5\5\1\0\1\5\4\0"+
    "\21\5\1\u0152\5\5\7\0\5\5\1\0\1\u0153\4\0"+
    "\27\5\7\0\5\5\1\0\1\5\4\0\7\5\1\u0154"+
    "\17\5\7\0\5\5\1\0\1\5\4\0\7\5\1\144"+
    "\17\5\7\0\5\5\1\0\1\5\4\0\2\5\1\u0155"+
    "\24\5\7\0\5\5\1\0\1\5\4\0\11\5\1\273"+
    "\15\5\7\0\5\5\1\0\1\5\4\0\17\5\1\u0156"+
    "\7\5\7\0\5\5\1\0\1\5\4\0\12\5\1\u0157"+
    "\14\5\7\0\5\5\1\0\1\5\4\0\13\5\1\u0158"+
    "\13\5\7\0\5\5\1\0\1\5\4\0\11\5\1\66"+
    "\15\5\7\0\5\5\1\0\1\5\4\0\1\5\1\u0136"+
    "\25\5\7\0\5\5\1\0\1\5\4\0\7\5\1\u0159"+
    "\17\5\7\0\5\5\1\0\1\5\4\0\7\5\1\115"+
    "\17\5\7\0\5\5\1\0\1\5\4\0\1\u015a\26\5"+
    "\7\0\5\5\1\0\1\5\4\0\5\5\1\u015b\21\5"+
    "\7\0\5\5\1\0\1\5\4\0\17\5\1\u015c\7\5"+
    "\7\0\5\5\1\0\1\5\4\0\7\5\1\u015d\17\5"+
    "\7\0\4\5\1\214\1\0\1\5\4\0\27\5\7\0"+
    "\5\5\1\0\1\5\4\0\3\5\1\u015e\23\5\7\0"+
    "\5\5\1\0\1\5\4\0\3\5\1\255\23\5\7\0"+
    "\5\5\1\0\1\5\4\0\1\u015f\13\5\1\u0160\12\5"+
    "\7\0\5\5\1\0\1\u0161\4\0\27\5\7\0\5\5"+
    "\1\0\1\5\4\0\1\u0162\1\u0163\2\5\1\u0164\2\5"+
    "\1\u0165\7\5\1\u0166\7\5\7\0\5\5\1\0\1\5"+
    "\4\0\11\5\1\67\15\5\7\0\5\5\1\0\1\5"+
    "\4\0\10\5\1\u0167\16\5\7\0\5\5\1\0\1\5"+
    "\4\0\7\5\1\u0168\17\5\7\0\5\5\1\0\1\5"+
    "\4\0\3\5\1\u0169\23\5\7\0\5\5\1\0\1\5"+
    "\4\0\16\5\1\u016a\10\5\7\0\5\5\1\0\1\5"+
    "\4\0\17\5\1\u0166\7\5\7\0\5\5\1\0\1\5"+
    "\4\0\5\5\1\u016b\21\5\7\0\5\5\1\0\1\5"+
    "\4\0\17\5\1\u016c\7\5\7\0\5\5\1\0\1\5"+
    "\4\0\12\5\1\u016d\14\5\7\0\5\5\1\0\1\5"+
    "\4\0\1\70\26\5\7\0\5\5\1\0\1\5\4\0"+
    "\1\u016e\26\5\7\0\5\5\1\0\1\227\4\0\27\5"+
    "\7\0\5\5\1\0\1\5\4\0\12\5\1\u012d\14\5"+
    "\7\0\5\5\1\0\1\5\4\0\1\5\1\u016f\25\5"+
    "\7\0\4\5\1\u0170\1\0\1\5\4\0\27\5\7\0"+
    "\5\5\1\0\1\5\4\0\3\5\1\u0171\23\5\7\0"+
    "\5\5\1\0\1\5\4\0\13\5\1\u0172\13\5\7\0"+
    "\5\5\1\0\1\5\4\0\1\5\1\u0173\25\5\7\0"+
    "\5\5\1\0\1\5\4\0\5\5\1\u0174\21\5\7\0"+
    "\5\5\1\0\1\5\4\0\17\5\1\u0175\7\5\7\0"+
    "\5\5\1\0\1\5\4\0\25\5\1\u0176\1\5\7\0"+
    "\5\5\1\0\1\5\4\0\2\5\1\u0177\24\5\7\0"+
    "\5\5\1\0\1\5\4\0\17\5\1\u0178\7\5\7\0"+
    "\5\5\1\0\1\5\4\0\4\5\1\u0179\22\5\7\0"+
    "\5\5\1\0\1\5\4\0\17\5\1\u017a\7\5\7\0"+
    "\5\5\1\0\1\5\4\0\3\5\1\u017b\23\5\7\0"+
    "\5\5\1\0\1\u017c\4\0\27\5\7\0\5\5\1\0"+
    "\1\5\4\0\13\5\1\72\13\5\7\0\5\5\1\0"+
    "\1\5\4\0\25\5\1\u017d\1\5\7\0\5\5\1\0"+
    "\1\5\4\0\14\5\1\u017e\12\5\7\0\5\5\1\0"+
    "\1\144\4\0\27\5\7\0\5\5\1\0\1\5\4\0"+
    "\25\5\1\u017f\1\5\7\0\5\5\1\0\1\5\4\0"+
    "\20\5\1\u0180\6\5\7\0\5\5\1\0\1\5\4\0"+
    "\15\5\1\u0181\11\5\7\0\5\5\1\0\1\5\4\0"+
    "\13\5\1\u0182\13\5\7\0\5\5\1\0\1\5\4\0"+
    "\25\5\1\u0183\1\5\7\0\5\5\1\0\1\5\4\0"+
    "\11\5\1\u0184\15\5\7\0\5\5\1\0\1\5\4\0"+
    "\3\5\1\u0185\23\5\7\0\5\5\1\0\1\5\4\0"+
    "\11\5\1\u0186\15\5\7\0\5\5\1\0\1\5\4\0"+
    "\7\5\1\u0187\17\5\7\0\5\5\1\0\1\5\4\0"+
    "\14\5\1\u0188\12\5\7\0\5\5\1\0\1\5\4\0"+
    "\24\5\1\u0189\2\5\7\0\5\5\1\0\1\5\4\0"+
    "\16\5\1\70\10\5\7\0\5\5\1\0\1\5\4\0"+
    "\10\5\1\u018a\16\5\7\0\5\5\1\0\1\5\4\0"+
    "\4\5\1\u018b\22\5\7\0\5\5\1\0\1\5\4\0"+
    "\5\5\1\u018c\21\5\7\0\5\5\1\0\1\u018d\4\0"+
    "\27\5\7\0\5\5\1\0\1\5\4\0\14\5\1\u018e"+
    "\12\5\7\0\5\5\1\0\1\5\4\0\10\5\1\u018f"+
    "\16\5\7\0\5\5\1\0\1\5\4\0\11\5\1\u0190"+
    "\15\5\7\0\5\5\1\0\1\5\4\0\3\5\1\u0191"+
    "\23\5\7\0\5\5\1\0\1\5\4\0\3\5\1\u0192"+
    "\23\5\7\0\5\5\1\0\1\5\4\0\10\5\1\u0193"+
    "\16\5\7\0\5\5\1\0\1\5\4\0\7\5\1\u0194"+
    "\17\5\7\0\5\5\1\0\1\5\4\0\12\5\1\166"+
    "\14\5\7\0\5\5\1\0\1\5\4\0\12\5\1\u0195"+
    "\14\5\7\0\5\5\1\0\1\5\4\0\7\5\1\u0196"+
    "\17\5\7\0\5\5\1\0\1\5\4\0\1\u0197\26\5"+
    "\7\0\5\5\1\0\1\5\4\0\4\5\1\356\22\5"+
    "\7\0\5\5\1\0\1\5\4\0\1\u0198\26\5\7\0"+
    "\5\5\1\0\1\5\4\0\22\5\1\u0199\4\5\7\0"+
    "\5\5\1\0\1\5\4\0\13\5\1\u019a\13\5\7\0"+
    "\5\5\1\0\1\5\4\0\11\5\1\u019b\15\5\7\0"+
    "\5\5\1\0\1\5\4\0\10\5\1\u019c\16\5\7\0"+
    "\5\5\1\0\1\5\4\0\15\5\1\u019d\11\5\7\0"+
    "\5\5\1\0\1\5\4\0\1\u019e\26\5\7\0\5\5"+
    "\1\0\1\5\4\0\1\5\1\u019f\25\5\7\0\5\5"+
    "\1\0\1\5\4\0\6\5\1\u01a0\20\5\7\0\5\5"+
    "\1\0\1\5\4\0\15\5\1\u01a1\11\5\7\0\5\5"+
    "\1\0\1\u01a2\4\0\27\5\7\0\4\5\1\u01a3\1\0"+
    "\1\5\4\0\27\5\7\0\5\5\1\0\1\5\4\0"+
    "\4\5\1\307\4\5\1\u01a4\1\313\14\5\7\0\5\5"+
    "\1\0\1\5\4\0\4\5\1\u01a5\22\5\7\0\5\5"+
    "\1\0\1\5\4\0\1\5\1\u01a6\25\5\7\0\5\5"+
    "\1\0\1\5\4\0\1\u01a7\26\5\7\0\5\5\1\0"+
    "\1\5\4\0\17\5\1\u01a8\7\5\7\0\5\5\1\0"+
    "\1\5\4\0\7\5\1\173\17\5\7\0\5\5\1\0"+
    "\1\u01a9\4\0\27\5\7\0\5\5\1\0\1\5\4\0"+
    "\5\5\1\u01aa\21\5\7\0\5\5\1\0\1\u01ab\4\0"+
    "\27\5\7\0\5\5\1\0\1\5\4\0\7\5\1\u01ac"+
    "\17\5\7\0\5\5\1\0\1\5\4\0\11\5\1\u01ad"+
    "\15\5\7\0\5\5\1\0\1\u01ae\4\0\27\5\7\0"+
    "\5\5\1\0\1\5\4\0\17\5\1\u01af\7\5\7\0"+
    "\5\5\1\0\1\5\4\0\2\5\1\u01b0\24\5\7\0"+
    "\5\5\1\0\1\5\4\0\12\5\1\u01b1\14\5\7\0"+
    "\5\5\1\0\1\u01b2\4\0\27\5\7\0\5\5\1\0"+
    "\1\5\4\0\14\5\1\u01b3\12\5\7\0\5\5\1\0"+
    "\1\u01b4\4\0\27\5\7\0\5\5\1\0\1\5\4\0"+
    "\5\5\1\u01b5\21\5\7\0\5\5\1\0\1\5\4\0"+
    "\15\5\1\u01b6\11\5\7\0\5\5\1\0\1\5\4\0"+
    "\17\5\1\121\7\5\7\0\5\5\1\0\1\5\4\0"+
    "\7\5\1\u01b7\17\5\7\0\5\5\1\0\1\5\4\0"+
    "\1\u01b8\26\5\7\0\5\5\1\0\1\5\4\0\25\5"+
    "\1\u01b9\1\5\7\0\5\5\1\0\1\5\4\0\3\5"+
    "\1\173\23\5\7\0\5\5\1\0\1\5\4\0\16\5"+
    "\1\u01ba\10\5\7\0\5\5\1\0\1\5\4\0\14\5"+
    "\1\u01bb\12\5\7\0\5\5\1\0\1\5\4\0\14\5"+
    "\1\242\12\5\7\0\5\5\1\0\1\5\4\0\11\5"+
    "\1\u01bc\15\5\7\0\5\5\1\0\1\5\4\0\1\5"+
    "\1\121\25\5\7\0\5\5\1\0\1\5\4\0\11\5"+
    "\1\u01bd\15\5\7\0\5\5\1\0\1\5\4\0\3\5"+
    "\1\201\23\5\7\0\5\5\1\0\1\5\4\0\3\5"+
    "\1\u01be\23\5\7\0\5\5\1\0\1\u01bf\4\0\27\5"+
    "\7\0\5\5\1\0\1\5\4\0\12\5\1\371\14\5"+
    "\7\0\5\5\1\0\1\5\4\0\11\5\1\u01c0\15\5"+
    "\7\0\5\5\1\0\1\5\4\0\4\5\1\u01c1\22\5"+
    "\7\0\5\5\1\0\1\173\4\0\27\5\7\0\5\5"+
    "\1\0\1\5\4\0\11\5\1\u01c2\15\5\7\0\5\5"+
    "\1\0\1\5\4\0\24\5\1\u01c3\2\5\7\0\5\5"+
    "\1\0\1\5\4\0\7\5\1\u01c4\17\5\7\0\5\5"+
    "\1\0\1\5\4\0\1\5\1\u01c5\25\5\7\0\5\5"+
    "\1\0\1\5\4\0\11\5\1\255\15\5\7\0\5\5"+
    "\1\0\1\5\4\0\5\5\1\301\21\5\7\0\5\5"+
    "\1\0\1\5\4\0\1\5\1\u0163\25\5\7\0\5\5"+
    "\1\0\1\5\4\0\24\5\1\u01c6\2\5\7\0\5\5"+
    "\1\0\1\5\4\0\17\5\1\u01c7\7\5\7\0\5\5"+
    "\1\0\1\5\4\0\3\5\1\u01c8\23\5\7\0\5\5"+
    "\1\0\1\5\4\0\13\5\1\u01c9\13\5\7\0\5\5"+
    "\1\0\1\u01ca\4\0\27\5\7\0\5\5\1\0\1\5"+
    "\4\0\1\u01cb\26\5\7\0\5\5\1\0\1\5\4\0"+
    "\12\5\1\u01cc\14\5\7\0\5\5\1\0\1\5\4\0"+
    "\5\5\1\230\21\5\7\0\5\5\1\0\1\5\4\0"+
    "\23\5\1\u013a\3\5\7\0\5\5\1\0\1\5\4\0"+
    "\11\5\1\u01cd\15\5\7\0\5\5\1\0\1\u01ce\4\0"+
    "\27\5\7\0\5\5\1\0\1\5\4\0\11\5\1\u01cf"+
    "\15\5\7\0\5\5\1\0\1\5\4\0\12\5\1\u01d0"+
    "\14\5\7\0\5\5\1\0\1\5\4\0\12\5\1\u01d1"+
    "\14\5\7\0\5\5\1\0\1\5\4\0\20\5\1\u019c"+
    "\6\5\7\0\5\5\1\0\1\5\4\0\22\5\1\70"+
    "\4\5\7\0\5\5\1\0\1\5\4\0\14\5\1\106"+
    "\12\5\7\0\5\5\1\0\1\5\4\0\13\5\1\70"+
    "\13\5\7\0\5\5\1\0\1\5\4\0\4\5\1\u01d2"+
    "\22\5\7\0\5\5\1\0\1\5\4\0\17\5\1\u01d3"+
    "\7\5\7\0\5\5\1\0\1\375\4\0\27\5\7\0"+
    "\5\5\1\0\1\5\4\0\11\5\1\246\15\5\7\0"+
    "\5\5\1\0\1\5\4\0\7\5\1\u013a\17\5\7\0"+
    "\4\5\1\u01d4\1\0\1\5\4\0\27\5\7\0\5\5"+
    "\1\0\1\5\4\0\1\173\26\5\7\0\5\5\1\0"+
    "\1\5\4\0\1\5\1\u01d5\25\5\7\0\5\5\1\0"+
    "\1\5\4\0\17\5\1\255\7\5\7\0\4\5\1\u01d6"+
    "\1\0\1\5\4\0\27\5\7\0\5\5\1\0\1\5"+
    "\4\0\13\5\1\325\13\5\7\0\5\5\1\0\1\305"+
    "\4\0\4\5\1\307\22\5\7\0\5\5\1\0\1\5"+
    "\4\0\25\5\1\242\1\5\7\0\5\5\1\0\1\5"+
    "\4\0\1\5\1\u01d7\25\5\7\0\5\5\1\0\1\5"+
    "\4\0\11\5\1\u01d8\15\5\7\0\5\5\1\0\1\5"+
    "\4\0\3\5\1\u01d9\23\5\7\0\5\5\1\0\1\5"+
    "\4\0\1\5\1\242\25\5\7\0\5\5\1\0\1\5"+
    "\4\0\1\5\1\u01da\25\5\7\0\5\5\1\0\1\5"+
    "\4\0\13\5\1\173\13\5\7\0\5\5\1\0\1\5"+
    "\4\0\4\5\1\u013b\22\5\7\0\5\5\1\0\1\5"+
    "\4\0\11\5\1\u01db\15\5\7\0\5\5\1\0\1\5"+
    "\4\0\5\5\1\u01dc\21\5\7\0\5\5\1\0\1\5"+
    "\4\0\4\5\1\u01dd\22\5\7\0\5\5\1\0\1\5"+
    "\4\0\2\5\1\242\24\5\7\0\5\5\1\0\1\5"+
    "\4\0\3\5\1\u01de\23\5\7\0\5\5\1\0\1\5"+
    "\4\0\11\5\1\u01df\15\5\7\0\5\5\1\0\1\5"+
    "\4\0\7\5\1\u01e0\17\5\7\0\5\5\1\0\1\5"+
    "\4\0\7\5\1\u01e1\17\5\7\0\5\5\1\0\1\5"+
    "\4\0\3\5\1\u01e2\23\5\7\0\5\5\1\0\1\5"+
    "\4\0\5\5\1\u01e3\21\5\7\0\5\5\1\0\1\5"+
    "\4\0\11\5\1\u01e4\15\5\7\0\5\5\1\0\1\5"+
    "\4\0\11\5\1\u01e5\15\5\7\0\5\5\1\0\1\5"+
    "\4\0\17\5\1\u01e6\7\5\7\0\5\5\1\0\1\u01e7"+
    "\4\0\27\5\7\0\5\5\1\0\1\5\4\0\11\5"+
    "\1\u01e8\15\5\7\0\5\5\1\0\1\5\4\0\2\5"+
    "\1\u01e9\24\5\7\0\5\5\1\0\1\5\4\0\7\5"+
    "\1\u01ea\17\5\7\0\5\5\1\0\1\5\4\0\11\5"+
    "\1\73\15\5\7\0\5\5\1\0\1\5\4\0\3\5"+
    "\1\u01eb\23\5\7\0\5\5\1\0\1\5\4\0\17\5"+
    "\1\u01ec\7\5\7\0\5\5\1\0\1\5\4\0\4\5"+
    "\1\u01ed\22\5\7\0\5\5\1\0\1\5\4\0\4\5"+
    "\1\u01ee\22\5\7\0\5\5\1\0\1\5\4\0\23\5"+
    "\1\u01ef\3\5\7\0\5\5\1\0\1\5\4\0\22\5"+
    "\1\u01f0\4\5\7\0\5\5\1\0\1\5\4\0\12\5"+
    "\1\u01f1\14\5\7\0\5\5\1\0\1\5\4\0\10\5"+
    "\1\242\16\5\7\0\5\5\1\0\1\5\4\0\10\5"+
    "\1\u01f2\16\5\7\0\5\5\1\0\1\5\4\0\20\5"+
    "\1\u01f3\6\5\7\0\5\5\1\0\1\5\4\0\3\5"+
    "\1\u01f4\23\5\7\0\5\5\1\0\1\u01f5\4\0\27\5"+
    "\7\0\5\5\1\0\1\5\4\0\12\5\1\u0136\14\5"+
    "\7\0\5\5\1\0\1\5\4\0\16\5\1\u01f6\10\5"+
    "\7\0\5\5\1\0\1\5\4\0\16\5\1\u013a\10\5"+
    "\7\0\5\5\1\0\1\5\4\0\15\5\1\u013a\11\5"+
    "\7\0\5\5\1\0\1\5\4\0\15\5\1\u01c8\11\5"+
    "\7\0\5\5\1\0\1\5\4\0\17\5\1\u0102\7\5"+
    "\7\0\5\5\1\0\1\5\4\0\11\5\1\u01f7\15\5"+
    "\7\0\5\5\1\0\1\5\4\0\4\5\1\166\22\5"+
    "\7\0\5\5\1\0\1\u01f8\4\0\27\5\7\0\5\5"+
    "\1\0\1\u01f9\4\0\27\5\7\0\5\5\1\0\1\5"+
    "\4\0\1\5\1\u01fa\25\5\7\0\5\5\1\0\1\5"+
    "\4\0\1\5\1\u01fb\25\5\7\0\5\5\1\0\1\5"+
    "\4\0\15\5\1\u01fc\11\5\7\0\5\5\1\0\1\5"+
    "\4\0\12\5\1\227\14\5\7\0\5\5\1\0\1\5"+
    "\4\0\20\5\1\70\6\5\7\0\5\5\1\0\1\5"+
    "\4\0\5\5\1\70\21\5\7\0\5\5\1\0\1\5"+
    "\4\0\11\5\1\u01fd\15\5\7\0\5\5\1\0\1\u01fe"+
    "\4\0\27\5\7\0\5\5\1\0\1\5\4\0\13\5"+
    "\1\u013a\13\5\7\0\5\5\1\0\1\5\4\0\4\5"+
    "\1\210\22\5\7\0\5\5\1\0\1\5\4\0\21\5"+
    "\1\u01ff\5\5\7\0\5\5\1\0\1\5\4\0\15\5"+
    "\1\u0200\11\5\7\0\5\5\1\0\1\u0201\4\0\27\5"+
    "\7\0\5\5\1\0\1\5\4\0\1\u0202\26\5\7\0"+
    "\5\5\1\0\1\5\4\0\4\5\1\u013a\22\5\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20746];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\34\1\1\11\1\1\1\11\1\0\1\11"+
    "\2\0\11\1\2\0\53\1\2\0\14\1\1\11\u0198\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[514];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    /**
     * Default constructor is needed as we will always call the yyreset
     */
    public HttpdConfLexer() {
        super();
    }

    /**
     * Helper method to create and return a new Token from of TokenType
     */
    private Token token(TokenType type) {
        return new Token(type, yychar, yylength());
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public HttpdConfLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public HttpdConfLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1808) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8: 
          { return token(TokenType.STRING);
          }
        case 9: break;
        case 7: 
          { return token(TokenType.KEYWORD);
          }
        case 10: break;
        case 6: 
          { return token(TokenType.OPERATOR);
          }
        case 11: break;
        case 2: 
          { /* skip */
          }
        case 12: break;
        case 5: 
          { return token(TokenType.NUMBER);
          }
        case 13: break;
        case 4: 
          { return token(TokenType.IDENTIFIER);
          }
        case 14: break;
        case 3: 
          { return token(TokenType.COMMENT);
          }
        case 15: break;
        case 1: 
          { 
          }
        case 16: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return null;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
